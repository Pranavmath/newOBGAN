diff --git a/datasets.py b/datasets.py
index 343f5da..2473036 100644
--- a/datasets.py
+++ b/datasets.py
@@ -6,9 +6,7 @@ import random
 import json
 from torchvision.transforms import functional as F
 
-# does image need to norm to -1, 1 or 0, 1 for faster rcnn
-# does image need to norm to -1, 1 or 0, 1 for faster rcnn
-# does image need to norm to -1, 1 or 0, 1 for faster rcnn
+# image norm to 0, 1 for faster rcnn
 
 
 class NoduleDataset(Dataset):
@@ -105,6 +103,9 @@ class CurriculumNoduleDataset(Dataset):
 
     
     def _update_idx_is_negative(self, old_difficulty, new_difficulty):
+        if new_difficulty < old_difficulty:
+            raise ValueError("new_difficulty must be >= old_difficulty")
+
         for image in self.nodule_images:
             if old_difficulty < self.difficulties[image] <= new_difficulty:
                 self.idx_is_negative.append((False, image))
diff --git a/normallearning.py b/normallearning.py
index 49754ec..3a44cf4 100644
--- a/normallearning.py
+++ b/normallearning.py
@@ -13,6 +13,7 @@ import torch
 import wandb
 from torchmetrics.detection import MeanAveragePrecision
 from torchvision.models.detection.rpn import AnchorGenerator
+import torchvision.models.detection._utils as det_utils
 
 
 wandb.init(project="diff model training", save_code=True)
@@ -44,6 +45,9 @@ def get_model():
         aspect_ratios=aspect_ratios
     )
 
+    # default is 256, 0.5
+    model.rpn.fg_bg_sampler = det_utils.BalancedPositiveNegativeSampler(batch_size_per_image, positive_fraction)
+
     return model
 
 
@@ -74,7 +78,7 @@ params = [p for p in model.parameters() if p.requires_grad]
 
 optimizer = torch.optim.AdamW(
     params,
-    lr=0.0001,
+    lr=0.0001,  
     weight_decay=1e-3
 )
 
